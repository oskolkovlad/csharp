using System;

namespace Algorithms
{
    // Алгоритм

    // В сортировке вставками последовательно обрабатываются отрезки массива, начиная с первого элемента и затем
    // последовательно расширяя подмассив, вставляя на своё место очередной неотсортированный элемент.

    // Для вставки используется буферная область памяти, в которой хранится элемент, ещё не вставленный на
    // своё место(так называемый ключевой элемент). В подмассиве, начиная с конца отрезка, перебираются элементы,
    // которые сравниваются с ключевым.Если эти элементы больше ключевого, то они сдивгаются на одну позицию вправо,
    // освобождая место для последующих элементов.Если в результате этого перебора попадается элемент,
    // меньший или равный ключевому, то значит в текущую свободную ячейку можно вставить ключевой элемент.

    // Сложность по времени:
    // - Худшая	 O(n * n / 2)
    // - Средняя O(n * n / 4)
    // - Лучшая  O(n)

    // Сложность по памяти
    // - Общая          O(n)
    // - Дополнительная O(1)

    public class InsertionSort<T> : Base<T>
        where T : IComparable
    {
        protected override void MakeSort()
        {
            for (var i = 1; i < Items.Count; i++)
            {

                var buffer = Items[i];
                var j = i;
                
                while (j > 0 && Items[j - 1].CompareTo(buffer) > 0)
                {
                    Items[j] = Items[--j];
                    SwapCount++;
                    CompareCount++;
                }
                CompareCount++;

                Items[j] = buffer;
            }
        }
    }
}
